/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RPSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "TIMEOUT"
      | "c1Hash"
      | "c2"
      | "j1"
      | "j1Timeout"
      | "j2"
      | "j2Timeout"
      | "lastAction"
      | "play"
      | "solve"
      | "stake"
      | "win"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "TIMEOUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "c1Hash", values?: undefined): string;
  encodeFunctionData(functionFragment: "c2", values?: undefined): string;
  encodeFunctionData(functionFragment: "j1", values?: undefined): string;
  encodeFunctionData(functionFragment: "j1Timeout", values?: undefined): string;
  encodeFunctionData(functionFragment: "j2", values?: undefined): string;
  encodeFunctionData(functionFragment: "j2Timeout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastAction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "play", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "solve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "win",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "TIMEOUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "c1Hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "c2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "j1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "j1Timeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "j2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "j2Timeout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastAction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "solve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "win", data: BytesLike): Result;
}

export interface RPS extends BaseContract {
  connect(runner?: ContractRunner | null): RPS;
  waitForDeployment(): Promise<this>;

  interface: RPSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  c1Hash: TypedContractMethod<[], [string], "view">;

  c2: TypedContractMethod<[], [bigint], "view">;

  j1: TypedContractMethod<[], [string], "view">;

  j1Timeout: TypedContractMethod<[], [void], "nonpayable">;

  j2: TypedContractMethod<[], [string], "view">;

  j2Timeout: TypedContractMethod<[], [void], "nonpayable">;

  lastAction: TypedContractMethod<[], [bigint], "view">;

  play: TypedContractMethod<[_c2: BigNumberish], [void], "payable">;

  solve: TypedContractMethod<
    [_c1: BigNumberish, _salt: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[], [bigint], "view">;

  win: TypedContractMethod<
    [_c1: BigNumberish, _c2: BigNumberish],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "c1Hash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "c2"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "j1"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "j1Timeout"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(nameOrSignature: "j2"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "j2Timeout"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lastAction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "play"
  ): TypedContractMethod<[_c2: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "solve"
  ): TypedContractMethod<
    [_c1: BigNumberish, _salt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "win"
  ): TypedContractMethod<
    [_c1: BigNumberish, _c2: BigNumberish],
    [boolean],
    "view"
  >;

  filters: {};
}
