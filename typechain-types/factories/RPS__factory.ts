/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../common";
import type { RPS, RPSInterface } from "../RPS";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_c1Hash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_j2",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "TIMEOUT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "c1Hash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "c2",
    outputs: [
      {
        internalType: "enum RPS.Move",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "j1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "j1Timeout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "j2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "j2Timeout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastAction",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum RPS.Move",
        name: "_c2",
        type: "uint8",
      },
    ],
    name: "play",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum RPS.Move",
        name: "_c1",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_salt",
        type: "uint256",
      },
    ],
    name: "solve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum RPS.Move",
        name: "_c1",
        type: "uint8",
      },
      {
        internalType: "enum RPS.Move",
        name: "_c2",
        type: "uint8",
      },
    ],
    name: "win",
    outputs: [
      {
        internalType: "bool",
        name: "w",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052604051620016b5380380620016b583398181016040528101906200002991906200016c565b34600481905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600281905550426005819055505050620001b3565b600080fd5b6000819050919050565b620000e181620000cc565b8114620000ed57600080fd5b50565b6000815190506200010181620000d6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001348262000107565b9050919050565b620001468162000127565b81146200015257600080fd5b50565b60008151905062000166816200013b565b92915050565b60008060408385031215620001865762000185620000c7565b5b60006200019685828601620000f0565b9250506020620001a98582860162000155565b9150509250929050565b6114f280620001c36000396000f3fe6080604052600436106100a75760003560e01c806380985af91161006457806380985af91461019d57806389f71d53146101c8578063a5ddec7c146101f3578063c37597c61461021c578063c839114214610247578063f56f48f21461025e576100a7565b80630c4395b9146100ac578063294914a4146100e95780633a4b66f11461010057806348e257cb1461012b5780634d03e3d21461015657806353a04b0514610181575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610c86565b610289565b6040516100e09190610ce1565b60405180910390f35b3480156100f557600080fd5b506100fe610395565b005b34801561010c57600080fd5b506101156104cf565b6040516101229190610d15565b60405180910390f35b34801561013757600080fd5b506101406104d5565b60405161014d9190610da7565b60405180910390f35b34801561016257600080fd5b5061016b6104e8565b6040516101789190610ddb565b60405180910390f35b61019b60048036038101906101969190610df6565b6104ee565b005b3480156101a957600080fd5b506101b26106d3565b6040516101bf9190610e64565b60405180910390f35b3480156101d457600080fd5b506101dd6106f9565b6040516101ea9190610d15565b60405180910390f35b3480156101ff57600080fd5b5061021a60048036038101906102159190610eab565b6106ff565b005b34801561022857600080fd5b50610231610aea565b60405161023e9190610e64565b60405180910390f35b34801561025357600080fd5b5061025c610b0e565b005b34801561026a57600080fd5b50610273610c56565b6040516102809190610d15565b60405180910390f35b600081600581111561029e5761029d610d30565b5b8360058111156102b1576102b0610d30565b5b036102bf576000905061038f565b600060058111156102d3576102d2610d30565b5b8360058111156102e6576102e5610d30565b5b036102f4576000905061038f565b600282600581111561030957610308610d30565b5b6103139190610f1a565b600284600581111561032857610327610d30565b5b6103329190610f1a565b036103655781600581111561034a57610349610d30565b5b83600581111561035d5761035c610d30565b5b10905061038f565b81600581111561037857610377610d30565b5b83600581111561038b5761038a610d30565b5b1190505b92915050565b600060058111156103a9576103a8610d30565b5b600360009054906101000a900460ff1660058111156103cb576103ca610d30565b5b1461040b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040290610fa8565b60405180910390fd5b61012c60055461041b9190610ff7565b421161045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390611077565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f193505050501580156104c4573d6000803e3d6000fd5b506000600481905550565b60045481565b600360009054906101000a900460ff1681565b60025481565b6000600581111561050257610501610d30565b5b600360009054906101000a900460ff16600581111561052457610523610d30565b5b14610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90610fa8565b60405180910390fd5b6000600581111561057857610577610d30565b5b81600581111561058b5761058a610d30565b5b036105cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c2906110e3565b60405180910390fd5b600454341461060f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106069061114f565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461069f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610696906111bb565b60405180910390fd5b80600360006101000a81548160ff021916908360058111156106c4576106c3610d30565b5b02179055504260058190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6000600581111561071357610712610d30565b5b82600581111561072657610725610d30565b5b03610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90611227565b60405180910390fd5b6000600581111561077a57610779610d30565b5b600360009054906101000a900460ff16600581111561079c5761079b610d30565b5b036107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d390611293565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610861906112ff565b60405180910390fd5b6002548282604051602001610880929190611376565b60405160208183030381529060405280519060200120146108d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cd906113ee565b60405180910390fd5b6108ef82600360009054906101000a900460ff16610289565b1561096e5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600454600261093d919061140e565b9081150290604051600060405180830381858888f19350505050158015610968573d6000803e3d6000fd5b50610ade565b610987600360009054906101000a900460ff1683610289565b15610a0857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60045460026109d7919061140e565b9081150290604051600060405180830381858888f19350505050158015610a02573d6000803e3d6000fd5b50610add565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050158015610a70573d6000803e3d6000fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050158015610adb573d6000803e3d6000fd5b505b5b60006004819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006005811115610b2257610b21610d30565b5b600360009054906101000a900460ff166005811115610b4457610b43610d30565b5b03610b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7b9061149c565b60405180910390fd5b61012c600554610b949190610ff7565b4211610bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcc90611077565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6004546002610c20919061140e565b9081150290604051600060405180830381858888f19350505050158015610c4b573d6000803e3d6000fd5b506000600481905550565b61012c81565b600080fd5b60068110610c6e57600080fd5b50565b600081359050610c8081610c61565b92915050565b60008060408385031215610c9d57610c9c610c5c565b5b6000610cab85828601610c71565b9250506020610cbc85828601610c71565b9150509250929050565b60008115159050919050565b610cdb81610cc6565b82525050565b6000602082019050610cf66000830184610cd2565b92915050565b6000819050919050565b610d0f81610cfc565b82525050565b6000602082019050610d2a6000830184610d06565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110610d7057610d6f610d30565b5b50565b6000819050610d8182610d5f565b919050565b6000610d9182610d73565b9050919050565b610da181610d86565b82525050565b6000602082019050610dbc6000830184610d98565b92915050565b6000819050919050565b610dd581610dc2565b82525050565b6000602082019050610df06000830184610dcc565b92915050565b600060208284031215610e0c57610e0b610c5c565b5b6000610e1a84828501610c71565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4e82610e23565b9050919050565b610e5e81610e43565b82525050565b6000602082019050610e796000830184610e55565b92915050565b610e8881610cfc565b8114610e9357600080fd5b50565b600081359050610ea581610e7f565b92915050565b60008060408385031215610ec257610ec1610c5c565b5b6000610ed085828601610c71565b9250506020610ee185828601610e96565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2582610cfc565b9150610f3083610cfc565b925082610f4057610f3f610eeb565b5b828206905092915050565b600082825260208201905092915050565b7f4a322068617320616c726561647920706c617965642e00000000000000000000600082015250565b6000610f92601683610f4b565b9150610f9d82610f5c565b602082019050919050565b60006020820190508181036000830152610fc181610f85565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061100282610cfc565b915061100d83610cfc565b925082820190508082111561102557611024610fc8565b5b92915050565b7f54696d656f757420686173206e6f74207061737365642e000000000000000000600082015250565b6000611061601783610f4b565b915061106c8261102b565b602082019050919050565b6000602082019050818103600083015261109081611054565b9050919050565b7f496e76616c6964206d6f76652e00000000000000000000000000000000000000600082015250565b60006110cd600d83610f4b565b91506110d882611097565b602082019050919050565b600060208201905081810360008301526110fc816110c0565b9050919050565b7f496e636f7272656374207374616b6520616d6f756e742e000000000000000000600082015250565b6000611139601783610f4b565b915061114482611103565b602082019050919050565b600060208201905081810360008301526111688161112c565b9050919050565b7f4f6e6c79204a322063616e2063616c6c20746869732066756e6374696f6e2e00600082015250565b60006111a5601f83610f4b565b91506111b08261116f565b602082019050919050565b600060208201905081810360008301526111d481611198565b9050919050565b7f496e76616c6964206d6f7665206279204a312e00000000000000000000000000600082015250565b6000611211601383610f4b565b915061121c826111db565b602082019050919050565b6000602082019050818103600083015261124081611204565b9050919050565b7f4a3220686173206e6f7420706c61796564207965742e00000000000000000000600082015250565b600061127d601683610f4b565b915061128882611247565b602082019050919050565b600060208201905081810360008301526112ac81611270565b9050919050565b7f4f6e6c79204a312063616e2063616c6c20746869732066756e6374696f6e2e00600082015250565b60006112e9601f83610f4b565b91506112f4826112b3565b602082019050919050565b60006020820190508181036000830152611318816112dc565b9050919050565b60008160f81b9050919050565b60006113378261131f565b9050919050565b61134f61134a82610d86565b61132c565b82525050565b6000819050919050565b61137061136b82610cfc565b611355565b82525050565b6000611382828561133e565b600182019150611392828461135f565b6020820191508190509392505050565b7f496e76616c696420636f6d6d69746d656e742e00000000000000000000000000600082015250565b60006113d8601383610f4b565b91506113e3826113a2565b602082019050919050565b60006020820190508181036000830152611407816113cb565b9050919050565b600061141982610cfc565b915061142483610cfc565b925082820261143281610cfc565b9150828204841483151761144957611448610fc8565b5b5092915050565b7f4a3220686173206e6f7420706c617965642e0000000000000000000000000000600082015250565b6000611486601283610f4b565b915061149182611450565b602082019050919050565b600060208201905081810360008301526114b581611479565b905091905056fea264697066735822122003b8ca0d22b28537bcfbdbc9a79568920df212d7d014d6ddde1f4723897e306c64736f6c63430008130033";

type RPSConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RPSConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RPS__factory extends ContractFactory {
  constructor(...args: RPSConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _c1Hash: BytesLike,
    _j2: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_c1Hash, _j2, overrides || {});
  }
  override deploy(
    _c1Hash: BytesLike,
    _j2: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_c1Hash, _j2, overrides || {}) as Promise<
      RPS & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RPS__factory {
    return super.connect(runner) as RPS__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RPSInterface {
    return new Interface(_abi) as RPSInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): RPS {
    return new Contract(address, _abi, runner) as unknown as RPS;
  }
}
